# Add the events section
events {
    worker_connections 1024;  # Adjust this value as needed
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Log format must be defined here, before any server blocks
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                '$status $body_bytes_sent "$http_referer" '
                '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;

    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }
    
    server {
        listen 80;
        server_name localhost;
            # Fix the CORS headers - make them more specific and complete
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, X-Requested-With' always;     
            add_header 'Access-Control-Max-Age' '3600' always;

            location / {
                proxy_pass http://0.0.0.0:8082;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

                # WebSocket support
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
            }

            location /ws/ {
                proxy_pass http://0.0.0.0:8082/ws/;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection $connection_upgrade;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

                # Buffering settings
                proxy_buffering on;
                proxy_buffer_size 16k;
                proxy_buffers 8 16k;

                # Timeout settings
                proxy_read_timeout 86400s;  # 24 hours
                proxy_send_timeout 86400s;
            }

            location /tasks {
                proxy_pass http://0.0.0.0:8082/tasks;  # Changed to match your Python server port
                if ($request_method = 'OPTIONS') {
                    add_header 'Access-Control-Allow-Origin' '*' always;
                    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
                    add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, X-Requested-With' always;
                    add_header 'Access-Control-Max-Age' '3600' always;
                    add_header 'Content-Type' 'text/plain; charset=UTF-8';
                    add_header 'Content-Length' 0;
                    return 204;
                }
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

                # Handle preflight requests properly
                if ($request_method = 'OPTIONS') {
                    add_header 'Content-Type' 'text/plain charset=UTF-8';
                    add_header 'Content-Length' 0;
                    return 204;
                }
            }
            location /api {
                proxy_pass http://0.0.0.0:8082/api;
                if ($request_method = 'OPTIONS') {
                    add_header 'Access-Control-Allow-Origin' '*' always;
                    add_header 'Access-Control-Allow-Methods' 'GET, POST, O>                    add_header 'Access-Control-Allow-Headers' 'Content-Type>                    add_header 'Access-Control-Max-Age' '3600' always;
                    add_header 'Content-Type' 'text/plain; charset=UTF-8';
                    add_header 'Content-Length' 0;
                    return 204;
                }
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

                # Handle preflight requests properly
                if ($request_method = 'OPTIONS') {
                    add_header 'Content-Type' 'text/plain charset=UTF-8';
                    add_header 'Content-Length' 0;
                    return 204;
                }
            }

            client_max_body_size 100M;    
        }
}
